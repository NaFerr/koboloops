uuid.name.loop <- grep("uuid", names(loop), value = T,
ignore.case = T)
split_pivot <- loop[[uuid.name.loop]]
split_loop <- split(loop, split_pivot)
new_parent <- parent
for (i in 1:length(variable.to.add)) {
result_aggregation <- lapply(split_loop, aggregate.function,
variable.to.add[i])
new_parent[[variable.to.add[i]]] <- NA
uuid_into_parent = which((parent$uuid %in% names(result_aggregation)) ==
TRUE)
new_parent[[variable.to.add[i]]][uuid_into_parent] <- result_aggregation
}
new_parent
i=1
result_aggregation <- lapply(split_loop, aggregate.function,
variable.to.add[i])
debugSource('~/GitHub/koboloops/tests/testthat/testthat.R')
source('~/GitHub/koboloops/R/standard_operations.R')
undebug(affect_loop_to_parent)
Q
undebug(affect_loop_to_parent)
undebugSource('~/GitHub/koboloops/tests/testthat/testthat.R')
source('~/GitHub/koboloops/R/standard_operations.R')
library(testthat)
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index",sum_child_age="age_child"))
affect_loop_to_parent(loop_data1, parent_data1,sum_index, c(age_parent="index"))
affect_loop_to_parent(loop_data2,parent_data1,sum_index, "index")
affect_loop_to_parent(loop_data2,parent_data1,sum_index, "index")
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
names("index") != ""
variable.to.add=c("index")
names(variable.to.add[1]) != ""
names(variable.to.add[1]) != ""
variable.to.add[1]
variable.to.add=c("index", "age")
debugSource('~/GitHub/koboloops/tests/testthat/testthat.R')
names(variable.to.add[1]) != ""
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index","age_child"))
source('~/GitHub/koboloops/R/standard_operations.R')
parent_data1 <- data.frame( uuid=1:10, age_parent=runif(10,5,30), other=runif(10))
loop_data1 <- data.frame (parent_uuid=sample(1:8,20,replace = T), initial=sample(letters,20,replace = T), index=1:20, age_child=sample(1:18, 20, replace = T))
#no uuid column
parent_data2 <- data.frame(index=1:10, age_parent=runif(10,5,30), other=runif(10))
#uuid are not the same as for the parent uuids
loop_data2 <- data.frame(parent_uuid=sample(11:20,20,replace = T), initial=sample(c("A","B","C"),20,replace = T),index=1:10)
#Rename columns if name already exist in parent dataframe
parent_data3 <- data.frame(parent_data1,Aggregation_Result_child=NA, Aggregation_Result_childX=1:20 )
#
# sum_index <- function(x, variable.to.add){
#   result_aggregation <- sum(x[[variable.to.add]])
#   return(result_aggregation)
# }
sum_index <- function(x){
result_aggregation <- sum(x)
return(result_aggregation)
}
loop <- loop_data1
parent <- parent_data1
aggregate.function <- sum_index
variable.to.add <- c(average_age="age_child", "index")
uuid.name.loop <- "parent_uuid"
uuid.name.parent <- "uuid"
#creates a list of dataframe. Each element of the list is a dataframe containing the loop rows corresponding to the same parent uuid
split_pivot <- loop[[uuid.name.loop]]
split_loop <- split(loop, split_pivot)
#For each variable to add, aggregate loop elements and add the result in a new column of the parent dataframe
new_parent <- parent
for(i in 1:length(variable.to.add)){
# For each dataframe of the list, aggregate variable.to.add by using the function choosen by the user
result_aggregation <- lapply( lapply(split_loop, function(x) x[[variable.to.add[i]]]), aggregate.function)
new_parent[[variable.to.add[i]]]<-NA #NA for the parent that doesn't correspond to any loop rows
uuid_into_parent=which((parent$uuid %in% names(result_aggregation))==TRUE)
new_parent[[variable.to.add[i]]][uuid_into_parent] <- result_aggregation
#Rename the column containing the results of the aggregation
if(names(variable.to.add[i])!=""){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
names(new_parent)[length(new_parent)] <- names(variable.to.add[i])
}
}
#if column name not specified by the user
else{
new_variable_name <- paste0("Aggregation_Result_",variable.to.add[i])
while(new_variable_name %in% names(new_parent)){ #in order to have a unique column name
new_name<- paste0(new_variable_name,"X")
}
names(new_parent)[length(new_parent)] <- new_variable_name
}
}
names(variable.to.add[i])!=""
variable.to.add <- c("index")
i=1
# For each dataframe of the list, aggregate variable.to.add by using the function choosen by the user
result_aggregation <- lapply( lapply(split_loop, function(x) x[[variable.to.add[i]]]), aggregate.function)
new_parent[[variable.to.add[i]]]<-NA #NA for the parent that doesn't correspond to any loop rows
uuid_into_parent=which((parent$uuid %in% names(result_aggregation))==TRUE)
new_parent[[variable.to.add[i]]][uuid_into_parent] <- result_aggregation
names(variable.to.add[i])!=""
#Rename the column containing the results of the aggregation
if(names(variable.to.add[i])!=""){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
names(new_parent)[length(new_parent)] <- names(variable.to.add[i])
}
}
variable.to.add <- c(index="index")
#Rename the column containing the results of the aggregation
if(names(variable.to.add[i])!=""){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
names(new_parent)[length(new_parent)] <- names(variable.to.add[i])
}
}
names(new_parent)
loop <- loop_data1
parent <- parent_data1
aggregate.function <- sum_index
variable.to.add <- c(index="index")
uuid.name.loop <- "parent_uuid"
uuid.name.parent <- "uuid"
parent
#For each variable to add, aggregate loop elements and add the result in a new column of the parent dataframe
new_parent <- parent
i=1
# For each dataframe of the list, aggregate variable.to.add by using the function choosen by the user
result_aggregation <- lapply( lapply(split_loop, function(x) x[[variable.to.add[i]]]), aggregate.function)
new_parent[[variable.to.add[i]]]<-NA #NA for the parent that doesn't correspond to any loop rows
uuid_into_parent=which((parent$uuid %in% names(result_aggregation))==TRUE)
new_parent[[variable.to.add[i]]][uuid_into_parent] <- result_aggregation
#Rename the column containing the results of the aggregation
if(names(variable.to.add[i])!=""){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
names(new_parent)[length(new_parent)] <- names(variable.to.add[i])
}
}
loop <- loop_data1
parent <- parent_data1
aggregate.function <- sum_index
variable.to.add <- c(index="index")
uuid.name.loop <- "parent_uuid"
uuid.name.parent <- "uuid"
loop <- loop_data1
parent <- parent_data1
aggregate.function <- sum_index
variable.to.add <- c(index="index")
uuid.name.loop <- "parent_uuid"
uuid.name.parent <- "uuid"
parent
#For each variable to add, aggregate loop elements and add the result in a new column of the parent dataframe
new_parent <- parent
i=1
#Rename the column containing the results of the aggregation
if(names(variable.to.add[i])!=""){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
names(new_parent)[length(new_parent)] <- names(variable.to.add[i])
}
}
new_parent
parent <- parent_data1
parent
#For each variable to add, aggregate loop elements and add the result in a new column of the parent dataframe
new_parent <- parent
new_parent
# For each dataframe of the list, aggregate variable.to.add by using the function choosen by the user
result_aggregation <- lapply( lapply(split_loop, function(x) x[[variable.to.add[i]]]), aggregate.function)
result_aggregation
loop <- loop_data1
parent <- parent_data1
aggregate.function <- sum_index
variable.to.add <- c(index="index")
uuid.name.loop <- "parent_uuid"
uuid.name.parent <- "uuid"
#For each variable to add, aggregate loop elements and add the result in a new column of the parent dataframe
new_parent <- parent
i=1
# For each dataframe of the list, aggregate variable.to.add by using the function choosen by the user
result_aggregation <- lapply( lapply(split_loop, function(x) x[[variable.to.add[i]]]), aggregate.function)
#Rename the column containing the results of the aggregation
if(names(variable.to.add[i])!=""){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
new_variable_name <- names(variable.to.add[i])
}
}
new_parent
new_variable_name
#if column name not specified by the user
else{
new_variable_name <- paste0("Aggregation_Result_",variable.to.add[i])
while(new_variable_name %in% names(new_parent)){ #in order to have a unique column name
new_name<- paste0(new_variable_name,"X")
}
new_parent[[variable.to.add[i]]]<-NA #NA for the parent that doesn't correspond to any loop rows
uuid_into_parent=which((parent$uuid %in% names(result_aggregation))==TRUE)
new_parent[[variable.to.add[i]]][uuid_into_parent] <- result_aggregation
}
names(new_parent)[length(new_parent)] <- new_variable_name
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/tests/testthat/testthat.R')
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index",sum_child_age="age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index",sum_child_age="age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
variable.to.add <- c("index")
for(i in 1:length(variable.to.add)){
# For each dataframe of the list, aggregate variable.to.add by using the function choosen by the user
result_aggregation <- lapply( lapply(split_loop, function(x) x[[variable.to.add[i]]]), aggregate.function)
#Rename the column containing the results of the aggregation
if(names(variable.to.add[i])!=""){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
new_variable_name <- names(variable.to.add[i])
}
}
#if column name not specified by the user
else{
new_variable_name <- paste0("Aggregation_Result_",variable.to.add[i])
while(new_variable_name %in% names(new_parent)){ #in order to have a unique column name
new_name<- paste0(new_variable_name,"X")
}
new_parent[[variable.to.add[i]]]<-NA #NA for the parent that doesn't correspond to any loop rows
uuid_into_parent=which((parent$uuid %in% names(result_aggregation))==TRUE)
new_parent[[variable.to.add[i]]][uuid_into_parent] <- result_aggregation
}
names(new_parent)[length(new_parent)] <- new_variable_name
}
variable.to.add <- c(index="index")
names(variable.to.add[i])!=""
variable.to.add <- c("index", "age_child")
names(variable.to.add[i])!=""
variable.to.add <- c("index")
#Rename the column containing the results of the aggregation
if((names(variable.to.add[i])!="")==TRUE){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
new_variable_name <- names(variable.to.add[i])
}
}
names(variable.to.add[i])=="")
names(variable.to.add[i])==""
names(variable.to.add[i])
#Rename the column containing the results of the aggregation
i=1
names(variable.to.add[i])
variable.to.add <- c("index", "age_child")
names(variable.to.add[i])
#Rename the column containing the results of the aggregation
i=2
names(variable.to.add[i])
variable.to.add <- "index"
#Rename the column containing the results of the aggregation
i=1
names(variable.to.add[i])
!is.null(names(variable.to.add[i]))
if(!is.null(names(variable.to.add[i]))){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
new_variable_name <- names(variable.to.add[i])
}
}
new_variable_name
new_variable_name <- "blbl"
new_variable_name
#Rename the column containing the results of the aggregation
i=1
names(variable.to.add[i])
variable.to.add[i]
is.null(names(variable.to.add[i]))
if(!is.null(names(variable.to.add[i]))){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
new_variable_name <- names(variable.to.add[i])
}
}
new_variable_name
if(is.null(names(variable.to.add[i]))){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
new_variable_name <- names(variable.to.add[i])
}
}
variable.to.add <- c(blablaba="index")
!is.null(names(variable.to.add[i]))
if(!is.null(names(variable.to.add[i]))){
if(names(variable.to.add[i]) %in% names(new_parent)){
stop("Please choose another variable name. This column name already exists in the parent dataframe")
}
else{
new_variable_name <- names(variable.to.add[i])
}
}
new_variable_name
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/tests/testthat/testthat.R')
library(testthat)
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
expect_identical( names(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index",age_child="age_child"))) , c("uuid","age_parent","other","Aggregation_Result_index","age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index",age_child="age_child"))
parent_data1 <- data.frame( uuid=1:10, age_parent=runif(10,5,30), other=runif(10))
loop_data1 <- data.frame (parent_uuid=sample(1:8,20,replace = T), initial=sample(letters,20,replace = T), index=1:20, age_child=sample(1:18, 20, replace = T))
#no uuid column
parent_data2 <- data.frame(index=1:10, age_parent=runif(10,5,30), other=runif(10))
#uuid are not the same as for the parent uuids
loop_data2 <- data.frame(parent_uuid=sample(11:20,20,replace = T), initial=sample(c("A","B","C"),20,replace = T),index=1:10)
#Rename columns if name already exist in parent dataframe
parent_data3 <- data.frame(parent_data1,Aggregation_Result_child=NA, Aggregation_Result_childX=1:20 )
#
# sum_index <- function(x, variable.to.add){
#   result_aggregation <- sum(x[[variable.to.add]])
#   return(result_aggregation)
# }
sum_index <- function(x){
result_aggregation <- sum(x)
return(result_aggregation)
}
names(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index",age_child="age_child")))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index",age_child="age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index",sum_child_age="age_child"))
source('~/GitHub/koboloops/tests/testthat/testthat.R')
parent_data1 <- data.frame( uuid=1:10, age_parent=runif(10,5,30), other=runif(10))
loop_data1 <- data.frame (parent_uuid=sample(1:8,20,replace = T), initial=sample(letters,20,replace = T), index=1:20, age_child=sample(1:18, 20, replace = T))
#no uuid column
parent_data2 <- data.frame(index=1:10, age_parent=runif(10,5,30), other=runif(10))
#uuid are not the same as for the parent uuids
loop_data2 <- data.frame(parent_uuid=sample(11:20,20,replace = T), initial=sample(c("A","B","C"),20,replace = T),index=1:10)
#Rename columns if name already exist in parent dataframe
parent_data3 <- data.frame(parent_data1,Aggregation_Result_child=NA, Aggregation_Result_childX=1:20 )
#
# sum_index <- function(x, variable.to.add){
#   result_aggregation <- sum(x[[variable.to.add]])
#   return(result_aggregation)
# }
sum_index <- function(x){
result_aggregation <- sum(x)
return(result_aggregation)
}
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
source('~/GitHub/koboloops/R/standard_operations.R')
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index",age_child="age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(blabala="index",age_child="age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index",age_child="age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index",age_child="age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child"))
debug(affect_loop_to_parent)
names(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child")))
#creates a list of dataframe. Each element of the list is a dataframe containing the loop rows corresponding to the same parent uuid
split_pivot <- loop[[uuid.name.loop]]
undebug(affect_loop_to_parent)
names(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child")))
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/tests/testthat/testthat.R')
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child"))
source('~/GitHub/koboloops/R/standard_operations.R')
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child"))
variable.to.add <- c(index="index","age_child")
!is.null(names(variable.to.add[2]))
names(variable.to.add[2])
"index"
names(variable.to.add[2])
variable.to.add <- c("index")
!is.null(names(variable.to.add[1]))
names(variable.to.add[1])
variable.to.add2 <- c(index="index","age_child")
names(variable.to.add2[1])
names(variable.to.add2[2])
source('~/GitHub/koboloops/R/standard_operations.R')
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
source('~/GitHub/koboloops/R/standard_operations.R')
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child"))
length(names(variable.to.add[1])) == 0
variable.to.add <- c("index")
length(names(variable.to.add[1])) == 0
variable.to.add2 <- c(index="index","age_child")
length(names(variable.to.add2[1])) == 0
length(names(variable.to.add2[2])) == 0
names(variable.to.add2[2])
length(names(variable.to.add2[2])) == 1
match(names(variable.to.add2[2]), "")
match(names(variable.to.add2[1]), "")==1
source('~/GitHub/koboloops/R/standard_operations.R')
library(koboloops)
library(koboloops)
parent_data1 <- data.frame( uuid=1:10, age_parent=runif(10,5,30), other=runif(10))
loop_data1 <- data.frame (parent_uuid=sample(1:8,20,replace = T), initial=sample(letters,20,replace = T), index=1:20, age_child=sample(1:18, 20, replace = T))
#no uuid column
parent_data2 <- data.frame(index=1:10, age_parent=runif(10,5,30), other=runif(10))
#uuid are not the same as for the parent uuids
loop_data2 <- data.frame(parent_uuid=sample(11:20,20,replace = T), initial=sample(c("A","B","C"),20,replace = T),index=1:10)
#Rename columns if name already exist in parent dataframe
parent_data3 <- data.frame(parent_data1,Aggregation_Result_child=NA, Aggregation_Result_childX=1:20 )
#
# sum_index <- function(x, variable.to.add){
#   result_aggregation <- sum(x[[variable.to.add]])
#   return(result_aggregation)
# }
sum_index <- function(x){
result_aggregation <- sum(x)
return(result_aggregation)
}
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
source('~/GitHub/koboloops/R/standard_operations.R')
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
source('~/GitHub/koboloops/R/standard_operations.R')
library(testthat)
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
source('~/GitHub/koboloops/tests/testthat/testthat.R')
source('~/GitHub/koboloops/R/standard_operations.R')
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
source('~/GitHub/koboloops/R/standard_operations.R')
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
source('~/GitHub/koboloops/R/standard_operations.R')
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
source('~/GitHub/koboloops/R/standard_operations.R')
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child"))
source('~/GitHub/koboloops/R/standard_operations.R')
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child"))
variable.to.add2 <- c(index="index","age_child")
b
match(names(variable.to.add2[1]), "")==1
match(names(variable.to.add2[2]), "") !=1
match(names(variable.to.add2[1]), "") !=1
source('~/GitHub/koboloops/tests/testthat/testthat.R')
grep(names(variable.to.add2[1]), "")
grep(names(variable.to.add2[2]), "")
grep(names(variable.to.add2[2]), "") !=1
grep(names(variable.to.add2[2]), "") ==1
grep(names(variable.to.add2[1]), "") ==1
is.null(names(variable.to.add2[1]))
is.null(names(variable.to.add2[2]))
source('~/GitHub/koboloops/R/standard_operations.R')
library(koboloops)
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c(index="index","age_child"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index","age_child"))
source('~/GitHub/koboloops/tests/testthat/testthat.R')
expect_identical( names(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index",sum_age_child="age_child"))) , c("uuid","age_parent","other","Aggregation_Result_index","sum_age_child"))
expect_identical( affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))[,"uuid"] , parent_data1[,"uuid"])
expect_identical(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index")), c("uuid","age_parent","other","Aggregation_Result_index"))
expect_identical(names(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))), c("uuid","age_parent","other","Aggregation_Result_index"))
names(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index")))
names(affect_loop_to_parent(loop_data1, parent_data3 ,sum_index, c("age_child")))
names(affect_loop_to_parent(loop_data1, parent_data3 ,sum_index, c(Aggregation_Result_child="age_child")))
#Rename columns if name already exist in parent dataframe
parent_data3 <- data.frame(parent_data1,Aggregation_Result_age_child=NA, Aggregation_Result_age_childX=1:20 )
names(affect_loop_to_parent(loop_data1, parent_data3 ,sum_index, c("age_child"))
names(affect_loop_to_parent(loop_data1, parent_data3 ,sum_index, c("age_child")))
expect_identical(names(affect_loop_to_parent(loop_data1, parent_data3 ,sum_index, c("age_child"))), c("uuid", "age_parent", "other", "Aggregation_Result_age_child", "Aggregation_Result_age_childX", "Aggregation_Result_age_childXX"))
source('~/GitHub/koboloops/tests/testthat/testthat.R')
source('~/GitHub/koboloops/tests/testthat/testthat.R')
source('~/GitHub/koboloops/tests/testthat/testthat.R')
source('~/GitHub/koboloops/R/standard_operations.R')
library(devtools)
devtools::document()
source('~/GitHub/koboloops/R/standard_operations.R')
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,error=FALSE)
library("cleaninginspectoR")
#devtools::install_github("ellieallien/cleaninginspectoR")
data<-read.csv(file.choose(),header=TRUE,sep=";", stringsAsFactors = F)
data$Community.Neighbourhood.Camp.Informal.settlement.p.code
a<-inspect_all(data,"Community.Neighbourhood.Camp.Informal.settlement.p.code")
kable(a)
