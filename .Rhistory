.libPaths()
devtools::install_github("r-lib/devtools")
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::load_all()
debug(load_all)
devtools::document()
devtools::load_all()
devtools::build()
devtools::load_all()
devtools::build()
devtools::load_all()
library(roxygen2)
devtools::build()
devtools::load_all()
source('~/GitHub/koboloops/R/standard_operations.R')
devtools::load_all()
debug(devtools::load_all)
devtools::load_all()
getwd()
library(devtools)
find_rtools()
has_rtools()
library(roxygen2)
devtools::load_all()
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::test()
devtools::use_testthat()
usethis::use_testthat()
usethis::use_testthat()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::use_vignette("my-vignette")
devtools::use_vignette("detailed_example")
usethis::use_vignette("detailed_example")
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,error=FALSE)
library("cleaninginspectoR")
#devtools::install_github("ellieallien/cleaninginspectoR")
data<-read.csv(file.choose(),header=TRUE,sep=";", stringsAsFactors = F)
data$Community.Neighbourhood.Camp.Informal.settlement.p.code
data$X.9
a<-inspect_all(data,"X.9")
kable(a)
#devtools::install_github("ellieallien/cleaninginspectoR")
data<-read.csv(file.choose(),header=TRUE,sep=";", stringsAsFactors = F)
data$X.9
a<-inspect_all(data,"X.9")
kable(a)
knitr::opts_chunk$set(echo = TRUE)
library("researchcyclematrix")
library(dplyr)
rcm<- researchcyclematrix::rcm_download()
rcm_find_file.id(rcm, "SSD1701a ")
rcm_find_file.id(rcm, "SYR1812d")
rcm_find_file.id(rcm, "SYR1703e")
rcm_find_file.id(rcm, "SSD1701a_AoK")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
aggregate.function <- function(x, variable.to.add){
result_aggregation <- sum(x[[variable.to.add]])/length(x)
return(result_aggregation)
}
library("koboloops")
parent <- data.frame(uuid=1:10, age=sample(10,30,60),parent_gender=sample(c("F","M"),10,replace = T))
View(parent)
View(parent)
uuid=1:10
age=sample(10,30,60)
parent <- data.frame(uuid=1:10, age=sample(30:60,10,replace = T),parent_gender=sample(c("F","M"),10,replace = T))
child <- data.frame(parent_uuid=sample(1:10,20,replace = T), age=sample(20,1,18), child_gender=sample(c("F","M"),20,replace = T))
family <- add_parent_to_loop(child,parent,"parent_uuid","uuid",c("age"))
family <- add_parent_to_loop(child,parent,uuid.name.loop = "parent_uuid",uuid.name.parent = "uuid",c("age"))
family
family <- add_parent_to_loop(child,parent,uuid.name.loop = "parent_uuid",uuid.name.parent = "uuid",c("age"))
aggregate.function <- function(x, variable.to.add){
result_aggregation <- sum(x[[variable.to.add]])/length(x)
return(result_aggregation)
}
family <- affect_loop_to_parent(child,parent,aggregate.function, variable.to.add ="age", parent_uuid","uuid")
family <- affect_loop_to_parent(child,parent,aggregate.function, variable.to.add ="age", "parent_uuid","uuid")
family
View(family)
View(family)
library(testthat)
library(koboloops)
test_check("koboloops")
sum_index <- function(x, variable.to.add){
result_aggregation <- sum(x[[variable.to.add]])
return(result_aggregation)
}
devtools::test_check("koboloops")
add_parent_to_loop(loop_data1, parent_data1 , c("others"))
library(testthat)
library(koboloops)
parent_data1 <- data.frame( uuid=1:10, age=runif(10,5,30), other=runif(10))
loop_data1 <- data.frame (parent_uuid=sample(1:8,20,replace = T), initial=sample(letters,20,replace = T), index=1:20, age=sample(1:18, 20, replace = T))
#no uuid column
parent_data2 <- data.frame(index=1:10, age=runif(10,5,30), other=runif(10))
#uuid are not the same as for the parent uuids
loop_data2 <- data.frame (parent_uuid=sample(11:20,20,replace = T), initial=sample(c("A","B","C"),20,replace = T))
sum_index <- function(x, variable.to.add){
result_aggregation <- sum(x[[variable.to.add]])
return(result_aggregation)
}
add_parent_to_loop(loop_data1, parent_data1 , c("others"))
add_parent_to_loop(loop_data1, parent_data1 , c("ages","index"))
add_parent_to_loop(loop_data1, parent_data1 , c("ages","other"))
add_parent_to_loop(loop_data1, parent_data1 , c("ages","others"))
add_parent_to_loop(loop_data1, parent_data1 , c("Ages","others"))
add_parent_to_loop(loop_data1, parent_data1 , c("Age","others"))
add_parent_to_loop(loop_data1, parent_data1 , c("Age","Other"))
add_parent_to_loop(loop_data1, parent_data1 ,c("age"), "uuid" , "uuid" )
add_parent_to_loop(loop_data1, parent_data2 , c("age"))
add_parent_to_loop(loop_data2,parent_data1,"age")
names(add_parent_to_loop(loop_data1,parent_data1)) , c("parent_uuid","e","age","d")
expect_identical( names(add_parent_to_loop(loop_data1,parent_data1)) , c("parent_uuid","e","age","d") )
names(add_parent_to_loop(loop_data1,parent_data1))
parent_data1 <- data.frame( uuid=1:10, age_parent=runif(10,5,30), other=runif(10))
loop_data1 <- data.frame (parent_uuid=sample(1:8,20,replace = T), initial=sample(letters,20,replace = T), index=1:20, age_child=sample(1:18, 20, replace = T))
#no uuid column
parent_data2 <- data.frame(index=1:10, age_parent=runif(10,5,30), other=runif(10))
#uuid are not the same as for the parent uuids
loop_data2 <- data.frame (parent_uuid=sample(11:20,20,replace = T), initial=sample(c("A","B","C"),20,replace = T))
sum_index <- function(x, variable.to.add){
result_aggregation <- sum(x[[variable.to.add]])
return(result_aggregation)
}
add_parent_to_loop(loop_data1, parent_data1 , c("Age_parent","Other"))
add_parent_to_loop(loop_data1, parent_data1 ,c("age_parent"), "uuid" , "uuid" )
add_parent_to_loop(loop_data1, parent_data2 , c("age_parent"))
add_parent_to_loop(loop_data2,parent_data1,"age")
expect_identical( names(add_parent_to_loop(loop_data1,parent_data1)) , c("parent_uuid","initial","index","age_child","age_parent","other"))
names(add_parent_to_loop(loop_data1,parent_data1))
expect_equal( nrow(add_parent_to_loop(loop_data1,parent_data1)) , 20)
expect_identical(add_parent_to_loop(loop_data1,parent_data1)[ ,"parent_uuid"], b[ ,"parent_uuid"])
expect_identical(add_parent_to_loop(loop_data1,parent_data1)[ ,"parent_uuid"], loop_data1[ ,"parent_uuid"])
expect_identical(add_parent_to_loop(loop_data1,parent_data1)[ ,"e"], loop_data1[ ,"e"])
expect_identical(add_parent_to_loop(loop_data1,parent_data1)[ ,"initial"], loop_data1[ ,"initial"])
expect_identical(names( add_parent_to_loop(loop_data1,parent_data1, c("age"), "parent_uuid","uuid")) , names(add_parent_to_loop(loop_data1,parent_data1, c("age")) ))
expect_identical(names( add_parent_to_loop(loop_data1,parent_data1, c("age_parent"), "parent_uuid","uuid")) , names(add_parent_to_loop(loop_data1,parent_data1, c("age_parent")) ))
expect_equal( nrow(add_parent_to_loop(loop_data1,parent_data1, c("age_parent"), "parent_uuid","uuid")) , 20 )
expect_identical( names(add_parent_to_loop(loop_data1,parent_data1, c("age"), "parent_uuid","uuid")) , c("parent_uuid","e","age"))
expect_identical( names(add_parent_to_loop(loop_data1,parent_data1, c("age_parent"), "parent_uuid","uuid")) , c("parent_uuid","initial","index","age_child","age_parent"))
expect_identical( add_parent_to_loop(loop_data1,parent_data1)[,"parent_uuid"] , loop_data1[,"parent_uuid"])
expect_identical( names(add_parent_to_loop(loop_data1,parent_data1, c("age_parent"), "parent_uuid","uuid")) , c("parent_uuid","initial","index","age_child","age_parent","other"))
expect_identical( names(add_parent_to_loop(loop_data1,parent_data1, c("age_parent"), "parent_uuid","uuid")) , c("parent_uuid","initial","index","age_child","age_parent"))
expect_identical( add_parent_to_loop(loop_data1,parent_data1)[,"parent_uuid"] , loop_data1[,"parent_uuid"])
expect_identical( add_parent_to_loop(loop_data1,parent_data1)[,"e"] , loop_data1[,"e"])
affect_loop_to_parent(loop_data1, parent_data1 , sum_index, c("Index"))
affect_loop_to_parent(loop_data1, parent_data1 , sum_index, c("index","Age"))
affect_loop_to_parent(loop_data1, parent_data1 , sum_index, c("Index","ages"))
affect_loop_to_parent(loop_data1, parent_data1 ,sum_index,c("age_child"),uuid.name.loop =  "uuid" , "uuid" )
affect_loop_to_parent(loop_data1, parent_data2 ,sum_index, c("age_child"))
ffect_loop_to_parent(loop_data2,parent_data1,sum_index, "index")
affect_loop_to_parent(loop_data2,parent_data1,sum_index, "index")
dd_parent_to_loop(loop_data2,parent_data1,"age_parent")
add_parent_to_loop(loop_data2,parent_data1,"age_parent")
#uuid are not the same as for the parent uuids
loop_data2 <- data.frame (parent_uuid=sample(11:20,20,replace = T), initial=sample(c("A","B","C"),20,replace = T),index=1:10)
add_parent_to_loop(loop_data2,parent_data1,"age_parent")
affect_loop_to_parent(loop_data2,parent_data1,sum_index, "index")
#uuid are not the same as for the parent uuids
loop_data2 <- data.frame(parent_uuid=sample(11:20,20,replace = T), initial=sample(c("A","B","C"),20,replace = T),index=1:10)
affect_loop_to_parent(loop_data2,parent_data1,sum_index, "index")
affect_loop_to_parent <- function( loop , parent , aggregate.function, variable.to.add, uuid.name.loop=NULL,uuid.name.parent=NULL)
{
# warning on inputs
if (is.data.frame(loop) == FALSE)stop("loop parameter has to be a dataframe")
if (is.data.frame(loop) == FALSE)stop("parent parameter has to be a dataframe")
if (is.null(variable.to.add)==TRUE)stop("Please provide the name of a the loop column you want to add to the parent dataset.")
#if (is.vector(variable.to.add) == FALSE) {
# if (lenght(variable.to.add) >1)stop("variables.to.add parameter has to be a vector of one element") }
#find uuid columns
if (is.null(uuid.name.parent) == TRUE) {
uuid.name.parent <- grep("uuid", names(parent), value = T,ignore.case = T)
if (length(uuid.name.parent) == 0) {
stop("Could not find the uuid automatically in the parent dataset. Please provide the name of the uuid column as a parameter")
}
if (length(uuid.name.parent) > 1) { uuid.name.parent <- uuid.name.parent[1] }
}
if (is.null(uuid.name.loop) == TRUE) {
uuid.name.loop <- grep("uuid", names(loop), value = T,ignore.case = T)
if (length(uuid.name.loop) == 0) {
stop("Could not find the uuid automatically in the loop dataset. Please provide the name of the uuid column as a parameter")
}
if (length(uuid.name.loop) > 1) { uuid.name.loop <- uuid.name.parent[1] }
}
#if uuid specified but does not exist
if (is.null(uuid.name.parent) == FALSE) {
if (!(uuid.name.parent %in% names(parent))) {
stop("Uuid name given does not exist in the parent dataset. Please provide the name of the uuid column as a parameter")
}
}
if (is.null(uuid.name.loop) == FALSE) {
if (!(uuid.name.loop %in% names(loop))) {
stop("Uuid name given does not exist in the loop dataset. Please provide the name of the uuid column as a parameter")
}
}
index_of_loop_in_parent<-match(loop[ ,uuid.name.loop],parent[ ,uuid.name.parent])
if (all(is.na(index_of_loop_in_parent))) {
stop("Could not find parent row corresponding to a loop row")
}
split_pivot <- loop[[uuid.name.loop]] # attention si plusieurs colonne avec m?me mot
split_loop <- split(loop, split_pivot)
if (!all((variable.to.add %in% names(loop)))) {
variables_Not_Exist = variable.to.add[which((variable.to.add %in% names(loop)) == FALSE)]
variables_Not_Exist_Error_Message = paste0(variables_Not_Exist, collapse = ", ")
variables_Not_Exist_Error_Message = paste("Variables not found in loop dataframe: ", variables_Not_Exist_Error_Message)
stop(variables_Not_Exist_Error_Message)
}
new_parent <- parent
for(i in 1:length(variable.to.add)){
result_aggregation <- lapply(split_loop, aggregate.function, variable.to.add[i])
new_parent[[variable.to.add[i]]]<-NA
uuid_into_parent=which((parent$uuid %in% names(result_aggregation))==TRUE)
new_parent[[variable.to.add[i]]][uuid_into_parent] <- result_aggregation
}
return(new_parent)
}
affect_loop_to_parent(loop_data2,parent_data1,sum_index, "index")
loop_data1, parent_data2 ,sum_index, c("age_child"))
affect_loop_to_parent(loop_data1, parent_data2 ,sum_index, c("age_child"))
expect_equal( nrow(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))) , 10 )
expect_identical( names(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))) , c("uuid","age","d","index"))
names(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index")))
expect_identical( names(affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))) , c("uuid","age_parent","other","index"))
expect_identical( affect_loop_to_parent(loop_data1, parent_data1 ,sum_index, c("index"))[,"uuid"] , parent_data1[,"uuid"])
devtools::build()
devtools::load_all()
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
source('~/GitHub/koboloops/R/standard_operations.R')
